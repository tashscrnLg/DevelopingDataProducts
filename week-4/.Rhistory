addMarkers(lat=origAddress$lon[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
latLgc <- 26.038197
lngLgc <- -80.407026
my_map <- leaflet() %>%
addTiles()
my_map <- my_map %>%
addMarkers(lat=latLgc, lng = lngLgc,
popup = "Louis & Joan Home")
my_map
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona", source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
View(origAddress)
#load ggmap
library(ggmap)
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google", userType = "free")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
View(origAddress)
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
rm(list=ls())
install.packages("lubridate")
library(plotly)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
View(p)
#Loading iris dataset
data(iris)
# to share interface on the web use below link
# https://plot.ly/
rm(list=ls())
library(plotly)
data(mtcars)
head(mtcars)
plot_ly(mtcars,x = mtcars$wt, y = mtcars$mpg, mode="markers")
plot_ly(mtcars,x = mtcars$wt, y = mtcars$mpg, mode="markers",
color = as.factor(mtcars$cyl))
plot_ly(mtcars,x = mtcars$wt, y = mtcars$mpg, mode="markers",
color = mtcars$disp)
plot_ly(mtcars,x = mtcars$wt, y = mtcars$mpg, mode="markers",
color = as.factor(mtcars$cyl), size = mtcars$hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd=5)
pressure <- rnorm(100)
dtime <- 1:100
plot_ly(x=temp, y= pressure, z=dtime, type ="scatter3d",
mode = "markers", color = temp)
data("airmiles")
head(airmiles)
time(airmiles)
plot_ly(x=time(airmiles), y=airmiles)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
head(EuStockMarkets)
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time=rep(time(EuStockMarkets),4))
head(stocks)
plot_ly(stocks, x=stocks$time,y=stocks$price,color=stocks$index)
#---------Histograms
plot_ly(x=precip, type="histogram")
#---------Boxplot
plot_ly(iris, y=iris$Petal.Length, color=iris$Species, type="box")
#---------HeatMap
terrain1 <- matrix(rnorm(100*100), nrow=100, ncol=100)
plot_ly(z=terrain1, type="heatmap")
#---------Surface
terrain2 <- matrix(rnorm(100*100), nrow=100, ncol=100)
plot_ly(z=terrain2, type="surface")
rm(list=ls())
install.packages("swirlify")
ibrary(ggmap)
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google")
ggmap
library(ggmap)
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google")
ggmap
rm(list=ls)
rm(list=ls())
library(ggmap)
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google")
ggmap(m)
library(ggmap)
m <- get_map("Kingston",zoom=12,maptype="terrain",source="google")
ggmap(m)
install.packages("mapview")
rm(list=ls())
df <- read_csv("https://raw.githubusercontent.com/fastah/sample-data/master/FastahDatasetMapsTutorial.csv")
library(mapview)
coordinates(df) <- ~ lon + lat
proj4string(df) <- "+init=epsg:4326"
mapview(df)
df <- readcsv("https://raw.githubusercontent.com/fastah/sample-data/master/FastahDatasetMapsTutorial.csv")
library(mapview)
coordinates(df) <- ~ lon + lat
proj4string(df) <- "+init=epsg:4326"
mapview(df)
df <- read.csv("https://raw.githubusercontent.com/fastah/sample-data/master/FastahDatasetMapsTutorial.csv")
library(mapview)
coordinates(df) <- ~ lon + lat
proj4string(df) <- "+init=epsg:4326"
mapview(df)
View(df)
rm(list=ls())
latLgc <- 26.038197
lngLgc <- -80.407026
my_map <- leaflet() %>%
addTiles()
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
rm(list=ls())
#load ggmap
library(ggmap)
library(leaflet)
# Read in the CSV data and store it in a variable
origAddress <- read.csv("./Data/geoCode.csv", stringsAsFactors = FALSE)
# Initialize the data frame
geocoded <- data.frame(stringsAsFactors = FALSE)
# Loop through the addresses to get the latitude and longitude of each address and add it to the
# origAddress data frame in new columns lat and lon
for(i in 1:nrow(origAddress))
{
# Print("Working...")
result <- geocode(origAddress$addresses[i], output = "latlona",
source = "google")
origAddress$lon[i] <- as.numeric(result[1])
origAddress$lat[i] <- as.numeric(result[2])
origAddress$geoAddress[i] <- as.character(result[3])
}
# Write a CSV file containing origAddress to the working directory
write.csv(origAddress, "./Data/geocoded.csv", row.names=FALSE)
my_map3 <- leaflet() %>%
addTiles()
for(i in 1:nrow(origAddress))
{
my_map3 <- my_map3 %>%
addMarkers(lat=origAddress$lat[i], lng = origAddress$lon[i],
popup = origAddress$geoAddress[i])
}
my_map3
install.packages(c("hms", "lubridate", "packrat", "rsconnect", "selectr", "sfsmisc", "yaml"))
install.packages("lubridate")
library(shiny)
runExample("02_text")
library(shiny)
runExample("01_hello")
library(shiny)
runExample("app")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/myApp')
runApp('~/myApp')
runApp()
library(shiny)
runApp('~/myApp')
runApp('~/myApp')
runApp('~/myApp')
runApp('~/myApp')
runApp('~/myApp')
runApp('~/myApp')
runApp('myapp')
?builder
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('myapp')
runApp('mpgApp')
runApp('mpgApp')
runApp('mpgApp')
runApp('mpgApp')
runApp('mpgApp')
shiny::runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
runApp('uiApp')
shiny::runApp('uiApp')
shiny::runApp('uiApp')
runApp('visApp')
runApp('visApp')
install.packages("miniUI")
version
server <- function(input, output, session){
observeEvent(input$done),{
stopApp()
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
myFirstGadget()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
myFirstGadget()
library(shiny)
library(miniUI)
myFirstGadget <- function(){
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session){
# done button closes the app
observeEvent(input$done,{
stopApp()
})
}
runGadget(ui, server)
}
runGadget(ui, server)
source('~/Development/RProgramming/gadgetApp.R')
myFirstGadget()
install.packages("rsconnect")
install.packages(c("lubridate", "packrat", "stringi"))
shiny::runApp('mpgApp')
shiny::runApp('stockApp')
runApp('stockApp')
install.packages("VGAM")
runApp('stockApp')
runApp('stockApp')
runApp('stockApp')
runApp('stockApp')
runApp('shiny1')
runApp('shiny1')
runApp('shiny1')
runApp('shiny1')
runApp('shiny1')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stockApp1')
runApp('stockApp1')
runApp('stockApp1')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
runApp('stkApp')
